@page "/"
@inject JackpotService JackpotService
@using JackpotsModel.Controlmesas
@inject HttpClient Http
@inject IJSRuntime JS


<div class="contenedor">
    <video id="video-fondo" autoplay muted loop>
        <source src="Video/Mesas.mp4" type="video/mp4">
        Tu navegador no soporta el elemento de video.
    </video>
    <div class="escalera-real">
        <div class="signo">$</div>
        <div id="odometer1" class="odometer">@EscaleraReal</div>
    </div>
    <div class="escalera-color">
        <div class="signo2" id="signo2">$</div>
        <div id="odometer2" class="odometer">@EscaleraColor</div>
    </div>
</div>


@code {
    private decimal EscaleraReal { get; set; } = 0;
    private decimal EscaleraColor { get; set; } = 0;
    private bool DataLoaded { get; set; } = false; // Bandera para indicar que los datos están listos

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Llama al endpoint para obtener los datos
            var response = await Http.GetFromJsonAsync<List<Jackpot>>("https://localhost:7217/api/Jackpot/GetVistaJackPot");

            // Asigna los valores a las variables
            if (response != null)
            {
                var escaleraReal = response.FirstOrDefault(x => x.NameWin == "Escalera Real");
                var escaleraColor = response.FirstOrDefault(x => x.NameWin == "Escalera Color");

                EscaleraReal = escaleraReal?.VisualValue ?? 0;
                EscaleraColor = escaleraColor?.VisualValue ?? 0;
            }

            DataLoaded = true; // Los datos están listos para el odómetro
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DataLoaded)
        {
            // Invoca JavaScript para inicializar los odómetros
            await JS.InvokeVoidAsync("initializeOdometers", EscaleraReal, EscaleraColor);
        }
    }
}

